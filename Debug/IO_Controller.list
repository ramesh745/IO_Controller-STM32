
IO_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000538  08000540  00001540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000538  08000538  00001540  2**0
                  CONTENTS
  4 .ARM          00000000  08000538  08000538  00001540  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000538  08000540  00001540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000538  08000538  00001538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800053c  0800053c  0000153c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001540  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000de8  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000046d  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  000027c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005a  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189e4  00000000  00000000  000028aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001026  00000000  00000000  0001b28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a532  00000000  00000000  0001c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a67e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000130  00000000  00000000  000a682c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  000a695c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000520 	.word	0x08000520

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000520 	.word	0x08000520

080001c8 <_ZN4GpioC1EP12GPIO_TypeDefh>:
// gpio.cpp
#include "Igpio.hpp"
#include "stm32f4xx.h"

Gpio::Gpio(GPIO_TypeDef* port, uint8_t pin)
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4613      	mov	r3, r2
 80001d4:	71fb      	strb	r3, [r7, #7]
: m_port(port), m_pin(pin) {}
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	68ba      	ldr	r2, [r7, #8]
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	79fa      	ldrb	r2, [r7, #7]
 80001e0:	711a      	strb	r2, [r3, #4]
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	4618      	mov	r0, r3
 80001e6:	3714      	adds	r7, #20
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr

080001f0 <_ZN4Gpio11enableClockEv>:

void Gpio::enableClock() {
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
// Clock enable logic, supports GPIOA to GPIOI
if (m_port == GPIOA) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a37      	ldr	r2, [pc, #220]	@ (80002dc <_ZN4Gpio11enableClockEv+0xec>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <_ZN4Gpio11enableClockEv+0x20>
 8000202:	4b37      	ldr	r3, [pc, #220]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000206:	4a36      	ldr	r2, [pc, #216]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	@ 0x30
else if (m_port == GPIOE) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
else if (m_port == GPIOF) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
else if (m_port == GPIOG) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
else if (m_port == GPIOH) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
else if (m_port == GPIOI) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
}
 800020e:	e05e      	b.n	80002ce <_ZN4Gpio11enableClockEv+0xde>
else if (m_port == GPIOB) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a33      	ldr	r2, [pc, #204]	@ (80002e4 <_ZN4Gpio11enableClockEv+0xf4>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d106      	bne.n	8000228 <_ZN4Gpio11enableClockEv+0x38>
 800021a:	4b31      	ldr	r3, [pc, #196]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 800021c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021e:	4a30      	ldr	r2, [pc, #192]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 8000220:	f043 0302 	orr.w	r3, r3, #2
 8000224:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000226:	e052      	b.n	80002ce <_ZN4Gpio11enableClockEv+0xde>
else if (m_port == GPIOC) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a2e      	ldr	r2, [pc, #184]	@ (80002e8 <_ZN4Gpio11enableClockEv+0xf8>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d106      	bne.n	8000240 <_ZN4Gpio11enableClockEv+0x50>
 8000232:	4b2b      	ldr	r3, [pc, #172]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 8000234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000236:	4a2a      	ldr	r2, [pc, #168]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 8000238:	f043 0304 	orr.w	r3, r3, #4
 800023c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800023e:	e046      	b.n	80002ce <_ZN4Gpio11enableClockEv+0xde>
else if (m_port == GPIOD) RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a29      	ldr	r2, [pc, #164]	@ (80002ec <_ZN4Gpio11enableClockEv+0xfc>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <_ZN4Gpio11enableClockEv+0x68>
 800024a:	4b25      	ldr	r3, [pc, #148]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024e:	4a24      	ldr	r2, [pc, #144]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 8000250:	f043 0308 	orr.w	r3, r3, #8
 8000254:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000256:	e03a      	b.n	80002ce <_ZN4Gpio11enableClockEv+0xde>
else if (m_port == GPIOE) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a24      	ldr	r2, [pc, #144]	@ (80002f0 <_ZN4Gpio11enableClockEv+0x100>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d106      	bne.n	8000270 <_ZN4Gpio11enableClockEv+0x80>
 8000262:	4b1f      	ldr	r3, [pc, #124]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 8000264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000266:	4a1e      	ldr	r2, [pc, #120]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 8000268:	f043 0310 	orr.w	r3, r3, #16
 800026c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800026e:	e02e      	b.n	80002ce <_ZN4Gpio11enableClockEv+0xde>
else if (m_port == GPIOF) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a1f      	ldr	r2, [pc, #124]	@ (80002f4 <_ZN4Gpio11enableClockEv+0x104>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d106      	bne.n	8000288 <_ZN4Gpio11enableClockEv+0x98>
 800027a:	4b19      	ldr	r3, [pc, #100]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 800027c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027e:	4a18      	ldr	r2, [pc, #96]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 8000280:	f043 0320 	orr.w	r3, r3, #32
 8000284:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000286:	e022      	b.n	80002ce <_ZN4Gpio11enableClockEv+0xde>
else if (m_port == GPIOG) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a1a      	ldr	r2, [pc, #104]	@ (80002f8 <_ZN4Gpio11enableClockEv+0x108>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d106      	bne.n	80002a0 <_ZN4Gpio11enableClockEv+0xb0>
 8000292:	4b13      	ldr	r3, [pc, #76]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000296:	4a12      	ldr	r2, [pc, #72]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 8000298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800029c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800029e:	e016      	b.n	80002ce <_ZN4Gpio11enableClockEv+0xde>
else if (m_port == GPIOH) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a15      	ldr	r2, [pc, #84]	@ (80002fc <_ZN4Gpio11enableClockEv+0x10c>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d106      	bne.n	80002b8 <_ZN4Gpio11enableClockEv+0xc8>
 80002aa:	4b0d      	ldr	r3, [pc, #52]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 80002ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ae:	4a0c      	ldr	r2, [pc, #48]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 80002b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002b6:	e00a      	b.n	80002ce <_ZN4Gpio11enableClockEv+0xde>
else if (m_port == GPIOI) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a10      	ldr	r2, [pc, #64]	@ (8000300 <_ZN4Gpio11enableClockEv+0x110>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d105      	bne.n	80002ce <_ZN4Gpio11enableClockEv+0xde>
 80002c2:	4b07      	ldr	r3, [pc, #28]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c6:	4a06      	ldr	r2, [pc, #24]	@ (80002e0 <_ZN4Gpio11enableClockEv+0xf0>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002cc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020400 	.word	0x40020400
 80002e8:	40020800 	.word	0x40020800
 80002ec:	40020c00 	.word	0x40020c00
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40021400 	.word	0x40021400
 80002f8:	40021800 	.word	0x40021800
 80002fc:	40021c00 	.word	0x40021c00
 8000300:	40022000 	.word	0x40022000

08000304 <_ZN4Gpio4initENS_4ModeENS_4PullE>:

void Gpio::init(Mode mode, Pull pull) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
 8000310:	4613      	mov	r3, r2
 8000312:	70bb      	strb	r3, [r7, #2]
enableClock();
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f7ff ff6b 	bl	80001f0 <_ZN4Gpio11enableClockEv>

// Set mode
m_port->MODER &= ~(0x3 << (m_pin * 2));
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	791b      	ldrb	r3, [r3, #4]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	2103      	movs	r1, #3
 8000328:	fa01 f303 	lsl.w	r3, r1, r3
 800032c:	43db      	mvns	r3, r3
 800032e:	4619      	mov	r1, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	400a      	ands	r2, r1
 8000336:	601a      	str	r2, [r3, #0]
m_port->MODER |= (static_cast<uint32_t>(mode) << (m_pin * 2));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	6819      	ldr	r1, [r3, #0]
 800033e:	78fa      	ldrb	r2, [r7, #3]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	791b      	ldrb	r3, [r3, #4]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	409a      	lsls	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	430a      	orrs	r2, r1
 800034e:	601a      	str	r2, [r3, #0]

// Set pull-up/pull-down
m_port->PUPDR &= ~(0x3 << (m_pin * 2));
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	68da      	ldr	r2, [r3, #12]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	791b      	ldrb	r3, [r3, #4]
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	2103      	movs	r1, #3
 800035e:	fa01 f303 	lsl.w	r3, r1, r3
 8000362:	43db      	mvns	r3, r3
 8000364:	4619      	mov	r1, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	400a      	ands	r2, r1
 800036c:	60da      	str	r2, [r3, #12]
m_port->PUPDR |= (static_cast<uint32_t>(pull) << (m_pin * 2));
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	68d9      	ldr	r1, [r3, #12]
 8000374:	78ba      	ldrb	r2, [r7, #2]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	791b      	ldrb	r3, [r3, #4]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	409a      	lsls	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	430a      	orrs	r2, r1
 8000384:	60da      	str	r2, [r3, #12]
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <_ZN4Gpio5writeEb>:

void Gpio::write(bool state) {
 800038e:	b480      	push	{r7}
 8000390:	b083      	sub	sp, #12
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	460b      	mov	r3, r1
 8000398:	70fb      	strb	r3, [r7, #3]
if (state)
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d009      	beq.n	80003b4 <_ZN4Gpio5writeEb+0x26>
    m_port->BSRR = (1 << m_pin);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	791b      	ldrb	r3, [r3, #4]
 80003a4:	461a      	mov	r2, r3
 80003a6:	2301      	movs	r3, #1
 80003a8:	fa03 f202 	lsl.w	r2, r3, r2
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	619a      	str	r2, [r3, #24]
else
    m_port->BSRR = (1 << (m_pin + 16));
}
 80003b2:	e007      	b.n	80003c4 <_ZN4Gpio5writeEb+0x36>
    m_port->BSRR = (1 << (m_pin + 16));
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	3310      	adds	r3, #16
 80003ba:	2201      	movs	r2, #1
 80003bc:	409a      	lsls	r2, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	619a      	str	r2, [r3, #24]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <main>:
#include "Igpio.hpp"

extern "C" void SystemInit();  // Provided by CMSIS startup
extern "C" int main() {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
    Gpio led(GPIOA, 6);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	2206      	movs	r2, #6
 80003dc:	4927      	ldr	r1, [pc, #156]	@ (800047c <main+0xac>)
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff fef2 	bl	80001c8 <_ZN4GpioC1EP12GPIO_TypeDefh>
    Gpio led1(GPIOA, 7);
 80003e4:	f107 0308 	add.w	r3, r7, #8
 80003e8:	2207      	movs	r2, #7
 80003ea:	4924      	ldr	r1, [pc, #144]	@ (800047c <main+0xac>)
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff feeb 	bl	80001c8 <_ZN4GpioC1EP12GPIO_TypeDefh>
    led.init(Gpio::Mode::Output, Gpio::Pull::None);
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	2200      	movs	r2, #0
 80003f8:	2101      	movs	r1, #1
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff82 	bl	8000304 <_ZN4Gpio4initENS_4ModeENS_4PullE>
    led1.init(Gpio::Mode::Output, Gpio::Pull::None);
 8000400:	f107 0308 	add.w	r3, r7, #8
 8000404:	2200      	movs	r2, #0
 8000406:	2101      	movs	r1, #1
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ff7b 	bl	8000304 <_ZN4Gpio4initENS_4ModeENS_4PullE>
    while (1) {
        led.write(true);
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	2101      	movs	r1, #1
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ffba 	bl	800038e <_ZN4Gpio5writeEb>
        led1.write(true);
 800041a:	f107 0308 	add.w	r3, r7, #8
 800041e:	2101      	movs	r1, #1
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ffb4 	bl	800038e <_ZN4Gpio5writeEb>
        for (volatile int i = 0; i < 100000; ++i);
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	e002      	b.n	8000432 <main+0x62>
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3301      	adds	r3, #1
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a12      	ldr	r2, [pc, #72]	@ (8000480 <main+0xb0>)
 8000436:	4293      	cmp	r3, r2
 8000438:	bfd4      	ite	le
 800043a:	2301      	movle	r3, #1
 800043c:	2300      	movgt	r3, #0
 800043e:	b2db      	uxtb	r3, r3
 8000440:	2b00      	cmp	r3, #0
 8000442:	d1f3      	bne.n	800042c <main+0x5c>
        led.write(false);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff9f 	bl	800038e <_ZN4Gpio5writeEb>
        led1.write(false);
 8000450:	f107 0308 	add.w	r3, r7, #8
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff99 	bl	800038e <_ZN4Gpio5writeEb>
        for (volatile int i = 0; i < 100000; ++i);
 800045c:	2300      	movs	r3, #0
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	e002      	b.n	8000468 <main+0x98>
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	3301      	adds	r3, #1
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	4a05      	ldr	r2, [pc, #20]	@ (8000480 <main+0xb0>)
 800046c:	4293      	cmp	r3, r2
 800046e:	bfd4      	ite	le
 8000470:	2301      	movle	r3, #1
 8000472:	2300      	movgt	r3, #0
 8000474:	b2db      	uxtb	r3, r3
 8000476:	2b00      	cmp	r3, #0
 8000478:	d1f3      	bne.n	8000462 <main+0x92>
    }
 800047a:	e7c8      	b.n	800040e <main+0x3e>
 800047c:	40020000 	.word	0x40020000
 8000480:	0001869f 	.word	0x0001869f

08000484 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000484:	480d      	ldr	r0, [pc, #52]	@ (80004bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000486:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000488:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800048c:	480c      	ldr	r0, [pc, #48]	@ (80004c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800048e:	490d      	ldr	r1, [pc, #52]	@ (80004c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000490:	4a0d      	ldr	r2, [pc, #52]	@ (80004c8 <LoopForever+0xe>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000494:	e002      	b.n	800049c <LoopCopyDataInit>

08000496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049a:	3304      	adds	r3, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800049c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a0:	d3f9      	bcc.n	8000496 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a2:	4a0a      	ldr	r2, [pc, #40]	@ (80004cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a4:	4c0a      	ldr	r4, [pc, #40]	@ (80004d0 <LoopForever+0x16>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a8:	e001      	b.n	80004ae <LoopFillZerobss>

080004aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ac:	3204      	adds	r2, #4

080004ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b0:	d3fb      	bcc.n	80004aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b2:	f000 f811 	bl	80004d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b6:	f7ff ff8b 	bl	80003d0 <main>

080004ba <LoopForever>:

LoopForever:
  b LoopForever
 80004ba:	e7fe      	b.n	80004ba <LoopForever>
  ldr   r0, =_estack
 80004bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004c8:	08000540 	.word	0x08000540
  ldr r2, =_sbss
 80004cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004d0:	2000001c 	.word	0x2000001c

080004d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d4:	e7fe      	b.n	80004d4 <ADC_IRQHandler>
	...

080004d8 <__libc_init_array>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	4d0d      	ldr	r5, [pc, #52]	@ (8000510 <__libc_init_array+0x38>)
 80004dc:	4c0d      	ldr	r4, [pc, #52]	@ (8000514 <__libc_init_array+0x3c>)
 80004de:	1b64      	subs	r4, r4, r5
 80004e0:	10a4      	asrs	r4, r4, #2
 80004e2:	2600      	movs	r6, #0
 80004e4:	42a6      	cmp	r6, r4
 80004e6:	d109      	bne.n	80004fc <__libc_init_array+0x24>
 80004e8:	4d0b      	ldr	r5, [pc, #44]	@ (8000518 <__libc_init_array+0x40>)
 80004ea:	4c0c      	ldr	r4, [pc, #48]	@ (800051c <__libc_init_array+0x44>)
 80004ec:	f000 f818 	bl	8000520 <_init>
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	10a4      	asrs	r4, r4, #2
 80004f4:	2600      	movs	r6, #0
 80004f6:	42a6      	cmp	r6, r4
 80004f8:	d105      	bne.n	8000506 <__libc_init_array+0x2e>
 80004fa:	bd70      	pop	{r4, r5, r6, pc}
 80004fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000500:	4798      	blx	r3
 8000502:	3601      	adds	r6, #1
 8000504:	e7ee      	b.n	80004e4 <__libc_init_array+0xc>
 8000506:	f855 3b04 	ldr.w	r3, [r5], #4
 800050a:	4798      	blx	r3
 800050c:	3601      	adds	r6, #1
 800050e:	e7f2      	b.n	80004f6 <__libc_init_array+0x1e>
 8000510:	08000538 	.word	0x08000538
 8000514:	08000538 	.word	0x08000538
 8000518:	08000538 	.word	0x08000538
 800051c:	0800053c 	.word	0x0800053c

08000520 <_init>:
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	bf00      	nop
 8000524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000526:	bc08      	pop	{r3}
 8000528:	469e      	mov	lr, r3
 800052a:	4770      	bx	lr

0800052c <_fini>:
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	bf00      	nop
 8000530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000532:	bc08      	pop	{r3}
 8000534:	469e      	mov	lr, r3
 8000536:	4770      	bx	lr
